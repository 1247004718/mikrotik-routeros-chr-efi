name: build-ros-chr-efi

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    permissions:
      contents: write # for release creation

    name: Build ${{matrix.version}}

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    strategy:
      fail-fast: false
      # max-parallel: 2
      matrix:
        version:
          # - 6.49.10
          - 7.11.2

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check server configuration
        run: |
          echo -e "--------------------------CPU Info--------------------------"
          echo "CPU Physical Num: $(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
          echo -e "CPU Core Num: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo "--------------------------Memory Info--------------------------"
          echo "Installed Memory Details:"
          sudo lshw -short -C memory | grep GiB
          echo -e "\n"
          echo "---------------------------Disk Info---------------------------"
          echo -e  "Disk Num: $(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
          echo "Disk Details:"
          df -Th

      - name: Initialize environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt update
          sudo -E apt -y install curl qemu-utils rsync unzip zip
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Download
        run: |
          curl -skL --retry 3 --connect-timeout 3 -o chr.img.zip https://download.mikrotik.com/routeros/${{matrix.version}}/chr-${{matrix.version}}.img.zip
          unzip chr.*.zip
          rm -rf chr.*.zip

      - name: Convert to qcow2
        run: |
          qemu-img convert -f raw -O qcow2 chr-*.img chr.qcow2
          rm -rf chr-*.img

      - name: Build efi qcow2
        id: build
        run: |
          sudo -E modprobe nbd
          sudo -E qemu-nbd -c /dev/nbd0 chr.qcow2
          sudo -E rm -rf /tmp/tmp*
          sudo -E mkdir /tmp/tmpmount/
          sudo -E mkdir /tmp/tmpefipart/
          sudo -E mount /dev/nbd0p1 /tmp/tmpmount/
          sudo -E rsync -a /tmp/tmpmount/ /tmp/tmpefipart/
          sudo -E umount /dev/nbd0p1
          sudo -E mkfs -t fat /dev/nbd0p1
          sudo -E mount /dev/nbd0p1 /tmp/tmpmount/
          sudo -E rsync -a /tmp/tmpefipart/ /tmp/tmpmount/
          sudo -E umount /dev/nbd0p1

          (
          echo 2 # use GPT
          echo t # change partition code
          echo 1 # select first partition
          echo 8300 # change code to Linux filesystem 8300
          echo r # Recovery/transformation
          echo h # Hybrid MBR
          echo 1 2 # partitions added to the hybrid MBR
          echo n # Place EFI GPT (0xEE) partition first in MBR (good for GRUB)? (Y/N)
          echo   # Enter an MBR hex code (default 83)
          echo y # Set the bootable flag? (Y/N)
          echo   # Enter an MBR hex code (default 83)
          echo n # Set the bootable flag? (Y/N)
          echo n # Unused partition space(s) found. Use one to protect more partitions? (Y/N)
          echo w # write changes to disk
          echo y # confirm
          ) | sudo -E gdisk /dev/nbd0

          sudo -E qemu-nbd -d /dev/nbd0

          if [ $? == 0 ]; then
              echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Convert images
        if:  steps.build.outputs.status == 'success' && !cancelled()
        run: |
          mkdir -p ./Firmware/
          cp -f chr.qcow2 ./Firmware/chr-efi.qcow2
          qemu-img convert -f qcow2 -O vmdk chr.qcow2 ./Firmware/chr-efi.vmdk
          qemu-img convert -f qcow2 -O vhdx chr.qcow2 ./Firmware/chr-efi.vhdx
          qemu-img convert -f qcow2 -O vdi chr.qcow2 ./Firmware/chr-efi.vdi
          qemu-img convert -f qcow2 -O raw chr.qcow2 ./Firmware/chr-efi.img
          ls -l ./Firmware

      - name: Upload Firmware to release
        if:  steps.build.outputs.status == 'success' && !cancelled()
        uses: ncipollo/release-action@v1
        with:
          name: ${{matrix.version}}
          allowUpdates: true
          removeArtifacts: true
          tag: ${{matrix.version}}
          commit: master
          token: ${{ secrets.PERSONAL_TOKEN }}
          artifacts: ./Firmware/*
